#include <SDL2/SDL.h>
#include <unistd.h>
#include "function.h"


#define WINDOW_WIDTH 700
#define WINDOW_HEIGHT 850
#define FPS 60


/*~~~~~~~~~~init Balle~~~~~~~~~~~*/
int xball;
int yball;
int rayonBall;
int vitesseBallx;
int vitesseBally;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~init Barre~~~~~~~~~~~*/
int posRectX; 
int posRectY;
int longueurRectW;
int longueurRectH;
int vitesseTouchex;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~init brick~~~~~~~~~~~*/
int tableauX;
int tableauY;
int longueurRectTabW;
int longueurRectTabH;
int espaceBrick;
int nbCol;
int nbLigne;
int compteurBrick;
int ecartBrickX;
int ecartBrickY;
int VieBrique[6][4];
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~init Start~~~~~~~~~~~*/
int start;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~init Vie joueur~~~~~~~~~~~*/
int coeur;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~init Ecran~~~~~~~~~~~*/
int logoAgain;
int logoTryAgain;
int logoNoYW;
int logoNoYD;
int logoX;
int logoY;
int logoheightY;
int ShowEcran;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~fonction brique~~~~~~~~~~~*/
void DrawTableauBrique()
{
	changeColor(155, 145, 236);
	for(int j=0;j<nbLigne;j++)
	{
		for(int i=0;i<nbCol;i++)
		{
			if(VieBrique[i][j]==1)
			{
				tableauX = ecartBrickX + (i * (longueurRectTabW + espaceBrick));
				tableauY = ecartBrickY + (j * (longueurRectTabH + espaceBrick));
				drawRect(tableauX,tableauY,longueurRectTabW,longueurRectTabH);
			}
			/*Rebond Brique*/
			if(VieBrique[i][j]==1 && ((yball+rayonBall)<=tableauY) && (yball-rayonBall>=tableauY+longueurRectTabH) && ((xball+rayonBall)<=tableauX) && ((xball-rayonBall)>=tableauX+longueurRectTabW) && (vitesseBally>0))
			{
				vitesseBally = -vitesseBally;
				VieBrique[i][j]= 0;
				compteurBrick--;
			}
			else if(VieBrique[i][j]==1 && (yball-rayonBall>=tableauY) && ((yball-rayonBall)<=tableauY+longueurRectTabH) && ((xball-rayonBall)>=tableauX) && ((xball-rayonBall)<=tableauX+longueurRectTabW) && (vitesseBally<0))
			{
				vitesseBally = -vitesseBally;
				VieBrique[i][j]= 0;
				compteurBrick--;
			}
			else if(VieBrique[i][j]==1 && (xball+rayonBall>=tableauX) && ((xball+rayonBall)<=tableauX+longueurRectTabW) && ((yball+rayonBall)>=tableauY) && ((yball+rayonBall)<=tableauY+longueurRectTabH) && (vitesseBallx>0))
			{
				vitesseBallx = -vitesseBallx;
				VieBrique[i][j]= 0;
				compteurBrick--;
			}
			else if(VieBrique[i][j]==1 && (xball-rayonBall>=tableauX) && ((xball-rayonBall)<=tableauX+longueurRectTabW) && ((yball-rayonBall)<=tableauY) && ((yball-rayonBall)<=tableauY+longueurRectTabH) && (vitesseBallx<0))
			{
				vitesseBallx = -vitesseBallx;
				VieBrique[i][j]= 0;
				compteurBrick--;
			}
			/*~~~~~~~~~~~~~~~~~~~~~~*/
		}
	}
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Tuto~~~~~~~~~*/
void DrawTuto()
{
	if(start==0 && coeur == 3)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran-tuto.bmp");
	}
	if(start == 0 && coeur == 2)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran-tuto-2Coeur.bmp");
	}
	if(start == 0 && coeur == 1)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran-tuto-1-coeur.bmp");
	}
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Ecran LOSE~~~~~~~~~*/
void EcranLose()
{
	if(coeur==0 && compteurBrick>0 && ShowEcran==1)
	{
		start = -999;
		sprite(0,0,"/home/yswai/Downloads/Ecran YouDied.bmp");
		for(int i =0;i<nbCol;i++)
		{
			for(int j=0;j<nbLigne;j++)
			{
				VieBrique[i][j]=1;
			}
		}
	}
	else if(coeur==0 && compteurBrick>0 && ShowEcran==2)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran-YouDied-TryAgain.bmp");
	}
	else if(coeur==0 && compteurBrick>0 && ShowEcran==3)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran YouDied QUIT.bmp");
	}
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Ecran WIN~~~~~~~~~*/
void EcranWin()
{
	if(compteurBrick==0 && coeur>0 && ShowEcran==1)
	{
		start = -999;
		sprite(0,0,"/home/yswai/Downloads/Ecran-YouWin.bmp");
	}
	else if(compteurBrick==0 && coeur>0 && ShowEcran==2)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran-YouWin-Again.bmp");

	}
	else if(compteurBrick==0 && coeur>0 && ShowEcran==3)
	{
		sprite(0,0,"/home/yswai/Downloads/Ecran-YouWin-No.bmp");
	}
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Balle~~~~~~~~~*/
void drawBall()
{
	changeColor(79, 112, 222);
	drawCircle(xball,yball,rayonBall);
	if(start>0)
	{
		xball += vitesseBallx;
		yball += vitesseBally;
	}
	if((xball+rayonBall >= WINDOW_WIDTH) || (xball<=rayonBall))
	{
		vitesseBallx = -vitesseBallx;	
	}
	else if(((yball+rayonBall <= 0) || (yball<=rayonBall)))
	{
		vitesseBally = -vitesseBally;
	}
	else if(((xball+rayonBall)>=posRectX) && ((xball+rayonBall)<=posRectX+(longueurRectW)) && ((yball+rayonBall)>=posRectY) && ((yball-rayonBall)<=posRectY+longueurRectH))
	{
		vitesseBally = -vitesseBally;
	}
	else if(((yball+rayonBall >= WINDOW_HEIGHT) || (yball<=rayonBall)))
	{
		start = 0;
		xball = posRectX+75;
		yball = posRectY-longueurRectH;
		vitesseBally = -vitesseBally;
		coeur--;
	}	
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Barre~~~~~~~~~*/
void drawBarre()
{
	sprite(posRectX,posRectY,"/home/yswai/Downloads/Barre.bmp");
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Coeur~~~~~~~~~*/
void DrawCoeur()
{
	for(int i=0;i<coeur;i++)
	{
		sprite(i*30,WINDOW_HEIGHT-30,"/home/yswai/Downloads/Coeur.bmp");
	}
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Game~~~~~~~~~*/
void Game()
{
		
	DrawTuto();

	drawBarre();
	drawBall();

	DrawTableauBrique();

	DrawCoeur();

	EcranLose();
	EcranWin();

	
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~fonction Restart Game~~~~~~~~~*/
void RestartGame()
{
	coeur = 3;
	start = 0;
	compteurBrick = nbCol*nbLigne;
	posRectX = (WINDOW_WIDTH/2)-75; 
 	posRectY = (WINDOW_HEIGHT-80);
	xball = posRectX+75;
	yball = posRectY-longueurRectH;
	for(int i =0;i<nbCol;i++)
	{
		for(int j=0;j<nbLigne;j++)
		{
			VieBrique[i][j]=1;
		}
	}
	Game();
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


///////////////////////////////


void init_game()
{
 	/*~~~~~~~~~~init barre~~~~~~~~~~~*/
 	posRectX = (WINDOW_WIDTH/2)-75; 
 	posRectY = (WINDOW_HEIGHT-80);
 	longueurRectW = 150;
 	longueurRectH = 30;
	vitesseTouchex = 15;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


	/*~~~~~~~~~~init balle~~~~~~~~~~~*/
    xball = posRectX+75;
	yball = posRectY-(longueurRectH+rayonBall);
	rayonBall = 15;
	vitesseBallx = 5;
 	vitesseBally = -5;
 	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	
	
	/*~~~~~~~~~~init brick~~~~~~~~~~~*/
	tableauX= 0;
	tableauY= 500;
	longueurRectTabW = 80;
	longueurRectTabH = 40;
	espaceBrick = 5;
	nbLigne = 4;
	nbCol = 6 ;
	ecartBrickX = (WINDOW_WIDTH-((nbCol * longueurRectTabW) + ((nbCol-1) * espaceBrick))) / 2;
	ecartBrickY = 20;
	for(int i =0;i<nbCol;i++)
	{
		for(int j=0;j<nbLigne;j++)
		{
			VieBrique[i][j]=1;
		}
	}
	compteurBrick = nbCol*nbLigne;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


	/*~~~~~~~~~~init Start~~~~~~~~~~~*/
	int start = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


	/*~~~~~~~~init VieJoueur~~~~~~~~~*/
	coeur = 3;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


	/*~~~~~~~~init Ecran~~~~~~~~~*/
	logoX = 150;
	logoY = 70;
	logoheightY = ((WINDOW_HEIGHT/2)+45);
	logoAgain = (WINDOW_WIDTH/2-(logoX+25));
	logoNoYW = ((WINDOW_WIDTH/2)+25);
	logoTryAgain = (WINDOW_WIDTH/2-(logoX+25));
	logoNoYD = ((WINDOW_WIDTH/2)+25);

	ShowEcran = 1;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
}


void drawGame(){
	clear();
	Game();
	actualize();
	usleep(1000000 / FPS); // 60 images par seconde | 1000000 = 1 seconde
}


void KeyPressed(SDL_Keycode touche){
    switch (touche) {
        case SDLK_SPACE:
			start++;
			break;
        case SDLK_d:
        	clear();
        	sprite(posRectX,posRectY,"/home/yswai/Downloads/Barre.bmp");
			if(start>0)
			{
				posRectX += vitesseTouchex;
				if(posRectX+longueurRectW+5< WINDOW_WIDTH )
				{
					vitesseTouchex = 0;
					posRectX = posRectX + 15;
				} 
			}
        	break;  
		case SDLK_q:
			clear();
			sprite(posRectX,posRectY,"/home/yswai/Downloads/Barre.bmp");
			if(start>0)
			{
				posRectX += -vitesseTouchex;
				if(posRectX-5 > 0 )
				{
					vitesseTouchex = 0;
					posRectX = posRectX - 15;
				} 
			}
        	break;
        case SDLK_ESCAPE:
            freeAndTerminate();
            break;
        default:
            break;
    }
}


void MouseClick(int MouseX,int MouseY)
{
	printf("position de la souris x : %d , y : %d\n", MouseX, MouseY);
	if(compteurBrick==0 && coeur>0)
	{
		if((MouseX>=logoAgain) && (MouseX<=logoAgain+logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			RestartGame();
		}
		else if((MouseX>=logoNoYW) && (MouseX<=logoNoYW+logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			freeAndTerminate();
		}
	}
	if(coeur==0 && compteurBrick>0)
	{
		if((MouseX>=logoTryAgain ) && (MouseX<=logoTryAgain +logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			RestartGame();
		}
		else if((MouseX>=logoNoYD) && (MouseX<=logoNoYD+logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			freeAndTerminate();
		}
	}
}


void MouseMovement(int MouseX,int MouseY)
{
	if(compteurBrick==0 && coeur>0)
	{
		if((MouseX>=logoAgain) && (MouseX<=logoAgain+logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			ShowEcran = 2;
		}
		else if((MouseX>=logoNoYW) && (MouseX<=logoNoYW+logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			ShowEcran = 3;
		}
		else
		{
			ShowEcran = 1;
		}
	}
	if(coeur==0 && compteurBrick>0)
	{
		if((MouseX>=logoTryAgain ) && (MouseX<=logoTryAgain +logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			ShowEcran = 2;
		}
		else if((MouseX>=logoNoYD) && (MouseX<=logoNoYD+logoX) && (MouseY>=logoheightY) && (MouseY<=logoheightY+logoY))
		{
			ShowEcran = 3;
		}
		else 
		{
			ShowEcran = 1;
		}
	}
}


void gameLoop() {
    int programLaunched = 1;
    while (programLaunched == 1) {
        // Boucle pour garder le programme ouvert
        // lorsque programLaunched est different de 1
        // on sort de la boucle, donc de la fonction
        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            // boucle pour la gestion d'évenement
            switch (event.type) {
                /** event.type renvoi le type d'evenement qui se passe
                 * (si on appuie sur une touche, clique de souris...)
                 * en fonction du type d'évènement on à alors
                 * différentes information accessibles
                 * voir doc pour plus d'event https://wiki.libsdl.org/SDL_EventType
                 */
                case SDL_QUIT:
                    // quand on clique sur fermer la fénêtre en haut à droite
                    programLaunched = 0;
                    break;
                case SDL_MOUSEBUTTONDOWN:
                    /* clique de la souris
                     * event.motion.y | event.motion.x pour les positions de la souris
                     */
                    MouseClick(event.motion.x, event.motion.y);
                    break;
				case SDL_MOUSEMOTION:
                    MouseMovement(event.motion.x, event.motion.y);
                    break;

                case SDL_KEYDOWN:
                    KeyPressed(event.key.keysym.sym);
                    break;
                case SDL_JOYBUTTONDOWN:
                    break;
                default:
                    break;
            }
        }
        /* coder ici pour que le code s'execute après chaque évenement
         * exemple dessiner un carré avec position int x, int y qu'on peut
         * deplacer lorsqu'on appuie sur une touche
         */
        drawGame();
    }
}


int main(){
    /** @description 3 fonctions dans le main qui permettent de créer l'application et la maintenir ouverte :
     *  init(...) : initialiser la SDL/ fenêtre
     *  gameLoop() : boucle de jeu dans laquelle l'application reste ouverte
     *  freeAndTerminate() : quitte le programme proprement
     */
    init(WINDOW_WIDTH, WINDOW_HEIGHT);
    init_game();
    gameLoop();
    printf("Fin du programme\n");
    freeAndTerminate();
}
